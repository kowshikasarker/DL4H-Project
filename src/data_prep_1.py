# -*- coding: utf-8 -*-
"""data_prep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13gYOHQXp45p6a4WZe84AVATbtC0Y1_m5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import os
import gc

data_path = '/content/drive/My Drive/DL4H/DL4H_Project/Bi_dimensional/data/mimicIII'

#chart_events_cols = ['subject_id', 'hadm_id', 'itemid']
chart_events_cols = ['SUBJECT_ID', 'HADM_ID', 'ITEMID']
chart_events = pd.read_csv(data_path + '/CHARTEVENTS.csv', sep=',', usecols=chart_events_cols)
print(chart_events.shape)
chart_events = chart_events.head(1000000)

chart_events = chart_events.groupby(['subject_id', 'hadm_id'])['itemid'].apply(list).to_frame().reset_index()
#chart_events = chart_events.groupby(['SUBJECT_ID', 'HADM_ID'])['ITEMID'].apply(list).to_frame().reset_index()
print(chart_events.shape)

len(chart_events['subject_id'].unique())

print(chart_events)

'''d_items_cols = ['itemid', 'label']
d_items = pd.read_csv(data_path + '/D_ITEMS.csv', sep=',', usecols=d_items_cols)
print(d_items.columns)
print(d_items.shape)'''

'''df = pd.merge(chart_events, d_items, how='inner', on=['itemid'])
gb = df.groupby(['subject_id', 'hadm_id'])
df1 = gb['itemid'].apply(list).to_frame().reset_index()
df2 = gb['label'].apply(list).to_frame().reset_index()
df = pd.merge(df1, df2, how='inner', on=['subject_id', 'hadm_id'])
print(df)
del chart_events
del d_items
gc.collect()'''

prescriptions_cols = ['subject_id', 'hadm_id', 'formulary_drug_cd']
prescriptions = pd.read_csv(data_path + '/PRESCRIPTIONS.csv', sep=',', usecols=prescriptions_cols)
print(prescriptions.shape)

prescriptions_gb = prescriptions[['subject_id', 'formulary_drug_cd']].drop_duplicates().groupby('formulary_drug_cd')
prescriptions_gb = prescriptions_gb.size().reset_index(name='count')
prescriptions_gb = prescriptions_gb[prescriptions_gb['count'] >= 20]

prescriptions = prescriptions[prescriptions['formulary_drug_cd'].isin(prescriptions_gb.formulary_drug_cd)]
print(prescriptions.shape)
# to do -> filtering based on entire ehr frequency 
prescriptions = prescriptions.groupby(['subject_id', 'hadm_id'])['formulary_drug_cd'].apply(list).to_frame().reset_index()
print(prescriptions.columns)

print(prescriptions.shape)
print(prescriptions)

df = pd.merge(chart_events, prescriptions, how='inner', on=['subject_id', 'hadm_id'])

print(df.shape)

print(df)

diagnoses_icd_cols = ['SUBJECT_ID',	'HADM_ID', 'ICD9_CODE'] #['subject_id', 'hadm_id', 'icd9_code']
diagnoses_icd = pd.read_csv(data_path + '/DIAGNOSES_ICD.csv', sep=',', usecols=diagnoses_icd_cols)
diagnoses_icd = diagnoses_icd.rename(columns={'SUBJECT_ID': 'subject_id', 'HADM_ID': 'hadm_id', 'ICD9_CODE': 'icd9_code'})
print(diagnoses_icd.shape)

diagnoses_icd_gb = diagnoses_icd.groupby('icd9_code').size().reset_index(name='count')
diagnoses_icd_gb = diagnoses_icd_gb[diagnoses_icd_gb['count'] > 50]

diagnoses_icd = diagnoses_icd[diagnoses_icd['icd9_code'].isin(diagnoses_icd_gb.icd9_code)]
diagnoses_icd = diagnoses_icd.groupby(['subject_id', 'hadm_id'])['icd9_code'].apply(list).to_frame().reset_index()

print(diagnoses_icd.shape)
print(diagnoses_icd)

df = pd.merge(df, diagnoses_icd, how='inner', on=['subject_id', 'hadm_id'])
del diagnoses_icd
gc.collect()

'''d_icd_diagnoses_cols = ['ICD9_CODE', 'SHORT_TITLE']
d_icd_diagnoses = pd.read_csv(data_path + '/D_ICD_DIAGNOSES.csv', sep=',', usecols=d_icd_diagnoses_cols)
d_icd_diagnoses = d_icd_diagnoses.rename(columns={'ICD9_CODE': 'icd9_code', 'SHORT_TITLE': 'short_title'})
print(d_icd_diagnoses.columns)'''

'''df = pd.merge(df, d_icd_diagnoses, how='inner', on=['icd9_code'])
del d_icd_diagnoses
gc.collect()'''

print(df.columns)

print(df)

print(df.shape)

subject = df['subject_id'].isnull().sum()
print(subject)

adm = df['hadm_id'].isnull().sum()
print(adm)

df.to_csv(data_path + '/data-1.tsv', sep='\t', index=False)

df.to_pickle(data_path + '/data-1.pkl')
